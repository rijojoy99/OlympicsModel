# Low Importance
trainData$Varaible_Valve_Timing_VVT <- NULL
trainData$main_bearing_type <- NULL
trainData$displacement <- NULL
testData$Varaible_Valve_Timing_VVT <- NULL
testData$main_bearing_type <- NULL
testData$displacement <- NULL
trainData<-centralImputation(trainData)
testData<-centralImputation(testData)
trainData <- trainData %>% mutate_if(is.character,as.factor)
testData <- testData %>% mutate_if(is.character,as.factor)
trainData<-trainData[!(trainData$main_bearing_type=="Journal"),]
str(trainData)
str(testData)
colnames(testData)
colnames(trainData)
colnames(trainData)[2] <- "Target"
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(trainData,2,pMiss)
apply(testData,2,pMiss)
trainData <- trainData[order(trainData$ID),]
testData <- testData[order(testData$ID),]
trainData <- trainData[ -c(1)]
testData  <- testData[ -c(1)]
colnames(trainData)
str(trainData)
str(testData)
apply(trainData,2,pMiss)
apply(trainData,2,pMiss)
str(trainData)
str(testData)
apply(trainData,2,pMiss)
View(trainData)
# PHD PART 2
rm(list = ls(all.names = all()))
setwd("E:\\Insofe_BigData\\PHD\\PART2")
library(sparklyr)
library(dplyr)
library(DMwR)
library(randomForest)
library(sqldf)
#spark_install(version = "2.1.0")
#sc <- spark_connect(master = "local")
test_data1 <- read.csv("Test.csv", header = T, sep = ",")
test_data_add <- read.csv("Test_AdditionalData.csv", header = T, sep = ",",as.is = T )
train_data1 <- read.csv("Train.csv", header = T, sep = ",")
train_data_add <- read.csv("Train_AdditionalData.csv", header = T, sep = "," ,as.is = T )
mergeSQlTrain <- sqldf( " select * from train_data1 LEFT JOIN train_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTest <- sqldf( " select * from test_data1 LEFT JOIN test_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTrain2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTrain a")
mergeSQlTest2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTest a")
mergeSQlTrain2$TestA <- NULL
mergeSQlTrain2$TestB <- NULL
mergeSQlTest2$TestA <- NULL
mergeSQlTest2$TestB <- NULL
nms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"y"                       ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
tms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
trainData <-  mergeSQlTrain2
testData <- mergeSQlTest2
trainData$y<-ifelse(trainData$y=="pass", 1, 0)
# Low Importance
trainData$Varaible_Valve_Timing_VVT <- NULL
trainData$main_bearing_type <- NULL
trainData$displacement <- NULL
testData$Varaible_Valve_Timing_VVT <- NULL
testData$main_bearing_type <- NULL
testData$displacement <- NULL
trainData<-centralImputation(trainData)
testData<-centralImputation(testData)
trainData <- trainData %>% mutate_if(is.character,as.factor)
testData <- testData %>% mutate_if(is.character,as.factor)
#main_bearing_type Journal
trainData<-trainData[!(trainData$main_bearing_type=="Journal"),]
#trainData[nms] <- lapply(trainData[nms], as.factor)
#testData[tnm] <-  lapply(testData[nms], as.factor)
str(trainData)
str(testData)
colnames(testData)
colnames(trainData)
colnames(trainData)[2] <- "Target"
# Get the NA's
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(trainData,2,pMiss)
apply(testData,2,pMiss)
trainData <- trainData[order(trainData$ID),]
testData <- testData[order(testData$ID),]
trainData <- trainData[ -c(1)]
testData  <- testData[ -c(1)]
colnames(trainData)
str(trainData)
str(testData)
View(trainData)
# PHD PART 2
rm(list = ls(all.names = all()))
setwd("E:\\Insofe_BigData\\PHD\\PART2")
library(sparklyr)
library(dplyr)
library(DMwR)
library(randomForest)
library(sqldf)
#spark_install(version = "2.1.0")
#sc <- spark_connect(master = "local")
test_data1 <- read.csv("Test.csv", header = T, sep = ",")
test_data_add <- read.csv("Test_AdditionalData.csv", header = T, sep = ",",as.is = T )
train_data1 <- read.csv("Train.csv", header = T, sep = ",")
train_data_add <- read.csv("Train_AdditionalData.csv", header = T, sep = "," ,as.is = T )
mergeSQlTrain <- sqldf( " select * from train_data1 LEFT JOIN train_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTest <- sqldf( " select * from test_data1 LEFT JOIN test_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTrain2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTrain a")
mergeSQlTest2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTest a")
mergeSQlTrain2$TestA <- NULL
mergeSQlTrain2$TestB <- NULL
mergeSQlTest2$TestA <- NULL
mergeSQlTest2$TestB <- NULL
nms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"y"                       ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
tms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
trainData <-  mergeSQlTrain2
testData <- mergeSQlTest2
trainData$y<-ifelse(trainData$y=="pass", 1, 0)
# Low Importance
trainData$Varaible_Valve_Timing_VVT <- NULL
trainData$main_bearing_type <- NULL
trainData$displacement <- NULL
testData$Varaible_Valve_Timing_VVT <- NULL
testData$main_bearing_type <- NULL
testData$displacement <- NULL
trainData$ID <- NULL
testData$ID  <- NULL
trainData<-centralImputation(trainData)
testData<-centralImputation(testData)
trainData <- trainData %>% mutate_if(is.character,as.factor)
testData <- testData %>% mutate_if(is.character,as.factor)
str(trainData)
str(testData)
colnames(testData)
colnames(trainData)
colnames(trainData)[2] <- "Target"
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(trainData,2,pMiss)
apply(testData,2,pMiss)
trainData <- trainData[order(trainData$ID),]
# PHD PART 2
rm(list = ls(all.names = all()))
setwd("E:\\Insofe_BigData\\PHD\\PART2")
library(sparklyr)
library(dplyr)
library(DMwR)
library(randomForest)
library(sqldf)
#spark_install(version = "2.1.0")
#sc <- spark_connect(master = "local")
test_data1 <- read.csv("Test.csv", header = T, sep = ",")
test_data_add <- read.csv("Test_AdditionalData.csv", header = T, sep = ",",as.is = T )
train_data1 <- read.csv("Train.csv", header = T, sep = ",")
train_data_add <- read.csv("Train_AdditionalData.csv", header = T, sep = "," ,as.is = T )
mergeSQlTrain <- sqldf( " select * from train_data1 LEFT JOIN train_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTest <- sqldf( " select * from test_data1 LEFT JOIN test_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTrain2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTrain a")
mergeSQlTest2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTest a")
mergeSQlTrain2$TestA <- NULL
mergeSQlTrain2$TestB <- NULL
mergeSQlTest2$TestA <- NULL
mergeSQlTest2$TestB <- NULL
nms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"y"                       ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
tms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
trainData <-  mergeSQlTrain2
testData <- mergeSQlTest2
trainData$y<-ifelse(trainData$y=="pass", 1, 0)
# Low Importance
trainData$Varaible_Valve_Timing_VVT <- NULL
trainData$main_bearing_type <- NULL
trainData$displacement <- NULL
testData$Varaible_Valve_Timing_VVT <- NULL
testData$main_bearing_type <- NULL
testData$displacement <- NULL
trainData$ID <- NULL
testData$ID  <- NULL
trainData<-centralImputation(trainData)
testData<-centralImputation(testData)
trainData <- trainData %>% mutate_if(is.character,as.factor)
testData <- testData %>% mutate_if(is.character,as.factor)
#main_bearing_type Journal
#trainData<-trainData[!(trainData$main_bearing_type=="Journal"),]
#trainData[nms] <- lapply(trainData[nms], as.factor)
#testData[tnm] <-  lapply(testData[nms], as.factor)
str(trainData)
str(testData)
colnames(testData)
colnames(trainData)
colnames(trainData)[2] <- "Target"
# Get the NA's
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(trainData,2,pMiss)
apply(testData,2,pMiss)
colnames(trainData)
str(trainData)
str(testData)
apply(trainData,2,pMiss)
View(trainData)
library(caTools)
set.seed(12345)
sum(is.na(trainData))
sample = sample.split(trainData, SplitRatio = .80)
train = subset(trainData, sample == TRUE)
test = subset(trainData, sample == FALSE)
summary(train)
str(train)
str(test)
str(testData)
sum(is.na(trainData))
sum(is.na(testData))
trainData$Varaible_Valve_Timing_VVT <- NA
trainData$main_bearing_type <- NA
trainData$displacement <- NA
testData$Varaible_Valve_Timing_VVT <- NA
testData$main_bearing_type <- NA
testData$displacement <- NA
RF<- randomForest(Target ~ .,mtry= 8, data=trainData, keep.forest=TRUE, ntree=100)
# PHD PART 2
rm(list = ls(all.names = all()))
setwd("E:\\Insofe_BigData\\PHD\\PART2")
library(sparklyr)
library(dplyr)
library(DMwR)
library(randomForest)
library(sqldf)
#spark_install(version = "2.1.0")
#sc <- spark_connect(master = "local")
test_data1 <- read.csv("Test.csv", header = T, sep = ",")
test_data_add <- read.csv("Test_AdditionalData.csv", header = T, sep = ",",as.is = T )
train_data1 <- read.csv("Train.csv", header = T, sep = ",")
train_data_add <- read.csv("Train_AdditionalData.csv", header = T, sep = "," ,as.is = T )
mergeSQlTrain <- sqldf( " select * from train_data1 LEFT JOIN train_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTest <- sqldf( " select * from test_data1 LEFT JOIN test_data_add ON (ID = TestA Or ID = TestB)")
mergeSQlTrain2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTrain a")
mergeSQlTest2 <- sqldf( " select a.*, case when TestA is null or TestB is null then 2 when TestA is not null and TestB is not null then 1 else 3 end test_results from mergeSQlTest a")
mergeSQlTrain2$TestA <- NULL
mergeSQlTrain2$TestB <- NULL
mergeSQlTest2$TestA <- NULL
mergeSQlTest2$TestB <- NULL
nms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"y"                       ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
tms <- c("Lubrication"              ,
"Bearing_Vendor"           ,
"Compression_ratio"        ,
"Cylinder_arragement"      ,
"Varaible_Valve_Timing_VVT",
"Direct_injection"         ,
"displacement"             ,
"Max_Torque"               ,
"Crankshaft_Design"        ,
"material_grade"          ,
"Valve_Type"              ,
"Fuel_Type"               ,
"cam_arrangement"         ,
"Turbocharger"            ,
"Cylinder_deactivation"   ,
"main_bearing_type"       ,
"piston_type"             ,
"Peak_Power"              ,
"Liner_Design"            ,
"test_results"    )
trainData <-  mergeSQlTrain2
testData <- mergeSQlTest2
trainData$y<-ifelse(trainData$y=="pass", 1, 0)
# Low Importance
trainData$Varaible_Valve_Timing_VVT <- NULL
trainData$main_bearing_type <- NULL
trainData$displacement <- NULL
testData$Varaible_Valve_Timing_VVT <- NULL
testData$main_bearing_type <- NULL
testData$displacement <- NULL
trainData$ID <- NULL
testData$ID  <- NULL
trainData<-centralImputation(trainData)
testData<-centralImputation(testData)
trainData <- trainData %>% mutate_if(is.character,as.factor)
testData <- testData %>% mutate_if(is.character,as.factor)
#main_bearing_type Journal
#trainData<-trainData[!(trainData$main_bearing_type=="Journal"),]
#trainData[nms] <- lapply(trainData[nms], as.factor)
#testData[tnm] <-  lapply(testData[nms], as.factor)
str(trainData)
str(testData)
colnames(testData)
colnames(trainData)
colnames(trainData)[2] <- "Target"
# Get the NA's
pMiss <- function(x){sum(is.na(x))/length(x)*100}
apply(trainData,2,pMiss)
apply(testData,2,pMiss)
#trainData <- trainData[order(trainData$ID),]
#testData <- testData[order(testData$ID),]
colnames(trainData)
str(trainData)
str(testData)
apply(trainData,2,pMiss)
View(trainData)
library(caTools)
set.seed(12345)
sum(is.na(trainData))
sample = sample.split(trainData, SplitRatio = .80)
train = subset(trainData, sample == TRUE)
test = subset(trainData, sample == FALSE)
summary(train)
str(train)
str(test)
str(testData)
# Build Model
sum(is.na(trainData))
sum(is.na(testData))
RF<- randomForest(Target ~ .,mtry= 8, data=trainData, keep.forest=TRUE, ntree=100)
print(RF)
RF$predicted
RF$importance
varImpPlot(RF)
varImpPlot(RF)
test_predicted <- predict(RF,test)
library(e1071)
library(caret)
confusionMatrix(data=test_predicted,reference=test$Target)
# PHD PART 2
rm(list = ls(all.names = all()))
setwd("E:\\Insofe_BigData\\PHD\\PART2")
library(sparklyr)
library(dplyr)
library(DMwR)
library(randomForest)
library(sqldf)
#spark_install(version = "2.1.0")
#sc <- spark_connect(master = "local")
test_data1 <- read.csv("Test.csv", header = T, sep = ",")
test_data_add <- read.csv("Test_AdditionalData.csv", header = T, sep = ",",as.is = T )
train_data1 <- read.csv("Train.csv", header = T, sep = ",")
train_data_add <- read.csv("Train_AdditionalData.csv", header = T, sep = "," ,as.is = T )
mergeSQlTrain <- sqldf( " select a.*, TestA, '' as TestB from train_data1 a LEFT JOIN train_data_add ON (ID = TestA)
select a.*, '' as TestA, TestB from train_data1 a LEFT JOIN train_data_add ON (ID = TestB) ")
mergeSQlTrainA <- sqldf( " select a.*, TestA, '' as TestB from train_data1 a LEFT JOIN train_data_add ON (ID = TestA) ")
mergeSQlTrainA <- sqldf( " select a.*, '' as TestA, TestB from train_data1 a LEFT JOIN train_data_add ON (ID = TestB) ")
View(mergeSQlTrainA)
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, a.TestA, b.TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (a.ID = b.ID) ")
mergeSQlTrainB <- sqldf( " select a.*, '' as TestA, TestB from train_data1 a LEFT JOIN train_data_add ON (ID = TestB) ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, a.TestA, b.TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (a.ID = b.ID) ")
mergeSQlTrainJoined <- sql_select( " select DISTINCT a.*, a.TestA, b.TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (a.ID = b.ID) ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, a.TestA, b.TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (mergeSQlTrainA.ID = mergeSQlTrainB.ID) ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestA, TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (mergeSQlTrainA.ID = mergeSQlTrainB.ID) ")
mergeSQlTrainA <- sqldf( " select a.*, TestA from train_data1 a LEFT JOIN train_data_add ON (ID = TestA) ")
mergeSQlTrainB <- sqldf( " select a.*, TestB from train_data1 a LEFT JOIN train_data_add ON (ID = TestB) ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestA, TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (mergeSQlTrainA.ID = mergeSQlTrainB.ID) ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestA, TestB from mergeSQlTrainA a JOIN mergeSQlTrainB ON (mergeSQlTrainA('ID') = mergeSQlTrainB('ID') ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestA, TestB
from mergeSQlTrainA a
JOIN mergeSQlTrainB
ON (ID = ID ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestA, TestB
from mergeSQlTrainA a
JOIN mergeSQlTrainB b
ON (a.ID = b.ID ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestB
from mergeSQlTrainA a
JOIN mergeSQlTrainB b
ON (a.ID = b.ID ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestB
from mergeSQlTrainA a
JOIN mergeSQlTrainB b
ON (a.ID = b.ID ")
mergeSQlTrainJoined <- sqldf( " select DISTINCT a.*, TestB from mergeSQlTrainA a JOIN mergeSQlTrainB b ON (a.ID = b.ID ")
inner_join(mergeSQlTrainA,mergeSQlTrainB, by=c("ID"))%>%
# filter(!is.na(AC.Name)|n()==1)%>%
#  select(Response.No,Tab.No,Survey.Date,AC.Name,Mandal.Name,Village.Name)
mergeSQlTest <- sqldf( " select * from test_data1 LEFT JOIN test_data_add ON (ID = TestA Or ID = TestB)")
inner_join(mergeSQlTrainA,mergeSQlTrainB, by=c("ID"))
mergeSQlTrainJoined <- inner_join(mergeSQlTrainA,mergeSQlTrainB, by=c("ID"))
View(mergeSQlTrainJoined)
mergeSQlTrainJoined <- left_join(mergeSQlTrainA,mergeSQlTrainB, by=c("ID"))
View(mergeSQlTrainJoined)
